// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point.proto

#ifndef PROTOBUF_point_2eproto__INCLUDED
#define PROTOBUF_point_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cstatd {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_point_2eproto();
void protobuf_AssignDesc_point_2eproto();
void protobuf_ShutdownFile_point_2eproto();

class Point;

enum Point_Type {
  Point_Type_GAUGE = 0,
  Point_Type_COUNTER = 1,
  Point_Type_SET = 2
};
bool Point_Type_IsValid(int value);
const Point_Type Point_Type_Type_MIN = Point_Type_GAUGE;
const Point_Type Point_Type_Type_MAX = Point_Type_SET;
const int Point_Type_Type_ARRAYSIZE = Point_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Point_Type_descriptor();
inline const ::std::string& Point_Type_Name(Point_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Point_Type_descriptor(), value);
}
inline bool Point_Type_Parse(
    const ::std::string& name, Point_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Point_Type>(
    Point_Type_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  typedef Point_Type Type;
  static const Type GAUGE = Point_Type_GAUGE;
  static const Type COUNTER = Point_Type_COUNTER;
  static const Type SET = Point_Type_SET;
  static inline bool Type_IsValid(int value) {
    return Point_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Point_Type_Type_MIN;
  static const Type Type_MAX =
    Point_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Point_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Point_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Point_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Point_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  double value() const;
  void set_value(double value);

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:cstatd.Point)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double value_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Point_TagsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  friend void  protobuf_AddDesc_point_2eproto();
  friend void protobuf_AssignDesc_point_2eproto();
  friend void protobuf_ShutdownFile_point_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional int64 timestamp = 1;
inline bool Point::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Point::timestamp() const {
  // @@protoc_insertion_point(field_get:cstatd.Point.timestamp)
  return timestamp_;
}
inline void Point::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cstatd.Point.timestamp)
}

// optional string name = 2;
inline bool Point::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Point::name() const {
  // @@protoc_insertion_point(field_get:cstatd.Point.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Point::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cstatd.Point.name)
}
inline void Point::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cstatd.Point.name)
}
inline void Point::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cstatd.Point.name)
}
inline ::std::string* Point::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cstatd.Point.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Point::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Point::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cstatd.Point.name)
}

// optional double value = 3;
inline bool Point::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Point::value() const {
  // @@protoc_insertion_point(field_get:cstatd.Point.value)
  return value_;
}
inline void Point::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cstatd.Point.value)
}

// map<string, string> tags = 4;
inline int Point::tags_size() const {
  return tags_.size();
}
inline void Point::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Point::tags() const {
  // @@protoc_insertion_point(field_map:cstatd.Point.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Point::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:cstatd.Point.tags)
  return tags_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cstatd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cstatd::Point_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cstatd::Point_Type>() {
  return ::cstatd::Point_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_point_2eproto__INCLUDED
